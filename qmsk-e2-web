#!/usr/bin/env python3

import argparse
import asyncio
import qmsk.cli
import qmsk.e2.client
import qmsk.e2.presets
import qmsk.e2.web
import qmsk.net.tcp

import logging; log = logging.getLogger('qmsk-e2-web')

@asyncio.coroutine
def start (loop, args):
    try:
        client = yield from qmsk.e2.client.E2Client.connect(args.e2_host)
    except qmsk.net.tcp.Error as error:
        log.error("%s: failed to connect: %s", args.e2_host, error)
        return 1

    if args.e2_presets_yaml:
        presets = qmsk.e2.presets.E2Presets.load_yaml(args.e2_presets_yaml)
    else:
        log.error("no presets given")
        return 1
    
    web_server = yield from qmsk.e2.web.start(loop, args.e2_web_port)

def main (argv):
    parser = qmsk.cli.parser()
    parser.add_argument('--e2-host', metavar='HOST',
        help="Encore2 host address")
    parser.add_argument('--e2-web-port', metavar='PORT', type=int, default=8080,
        help="Web server port")
    parser.add_argument('--e2-presets-yaml', metavar='PATH', type=argparse.FileType('r'),
        help="Load presets from YAML")
    
    # setup
    args = qmsk.cli.parse(parser, argv)
    loop = asyncio.get_event_loop()

    # start
    do_start = asyncio.async(start(loop, args))

    try:
        log.info("start event loop")
        ret = loop.run_until_complete(do_start)

    except Exception as error:
        log.exception("Failed to start")
        return 1

    else:
        if ret:
            return ret

        log.info("startup complete")

    # run
    try:
        log.info("enter event loop")
        loop.run_forever()

    except Exception as error:
        log.exception("Failed to start")
        return 1

    else:
        log.info("exit")
        return 0

if __name__ == '__main__':
    qmsk.cli.main(main)
